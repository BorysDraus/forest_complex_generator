# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ForestComplexGenerator
                                 A QGIS plugin
 Joins forest polygons in comlexes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by BULiGL
        email                : ariel.franczak@brzeg.buligl.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis._core import QgsWkbTypes, QgsMapLayer, QgsVectorFileWriter, QgsVectorDataProvider, QgsField, QgsRectangle, QgsMapLayerProxyModel, QgsProcessing
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *
from qgis.core import QgsProject, Qgis, QgsVectorLayer, QgsProcessingFeedback, QgsCoordinateReferenceSystem

# Import the code for the DockWidget
from .forest_complex_generator_dockwidget import ForestComplexGeneratorDockWidget
import os.path
from qgis import processing
from qgis.gui import QgsProjectionSelectionDialog


class ForestComplexGenerator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ForestComplexGenerator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ForestComplexGenerator')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ForestComplexGenerator')
        self.toolbar.setObjectName(u'ForestComplexGenerator')

        #print "** INITIALIZING ForestComplexGenerator"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ForestComplexGenerator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/forest_complex_generator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING ForestComplexGenerator"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD ForestComplexGenerator"

        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&ForestComplexGenerator'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # Label - dodawanie danych
    def appendDataToLabel(self, text_message, QLabel):
        text = QLabel.text()
        if text:
            QLabel.setText(text + "\n" + text_message)
        else:
            QLabel.setText(text_message)



    # 01 Repair geometry
    def repairGeometry(self):
        input_layer = self.dockwidget.mMapLayerComboBoxInput.currentLayer()
        result = processing.run("native:fixgeometries", {'INPUT': input_layer, 'METHOD': 1, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("01_rapair_geometry")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)
        self.appendDataToLabel("01. Naprawiona geometri....",  self.dockwidget.label_info)


    # 02 Build spatial index
    def createSpatialIndex(self):
        input_layer = QgsProject.instance().mapLayersByName("01_rapair_geometry")[0]
        # QgsProject.instance().removeMapLayer(input_layer.id())
        params = {'INPUT': input_layer, 'OUTPUT': 'memory:'}
        processing.run("native:createspatialindex", params)
        self.appendDataToLabel("02 Nadano indeks przestrzenny", self.dockwidget.label_info)


    # 03 Explode to single parts

    def multiToSinglePart(self):

        input_layer = QgsProject.instance().mapLayersByName("01_rapair_geometry")[0]
        result = processing.run("native:multiparttosingleparts", {
            'INPUT': input_layer, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("03_single_parts")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)
        self.appendDataToLabel("03 Rozbito multiparts na single parts", self.dockwidget.label_info)


    # 04 Create buffer with declared distance divided by 2 with polygon agregation option

    def bufferComplexes(self):

        distance = self.dockwidget.lineEditDistance.text()

        input_layer = QgsProject.instance().mapLayersByName("03_single_parts")[0]
        result = processing.run("native:buffer", {'INPUT': input_layer ,'DISTANCE': int(distance) / 2 , 'SEGMENTS': 5, 'END_CAP_STYLE': 0, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'DISSOLVE': True, 'OUTPUT': 'memory:'})
        proclayer = result['OUTPUT']
        result = processing.run("native:multiparttosingleparts", {
            'INPUT': proclayer, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("04_buffer")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)

        self.appendDataToLabel("04 Utworzono bufor kompleksów", self.dockwidget.label_info)


    # 05 Calculate buffer id

    def calcBuffId(self):

        input_layer = QgsProject.instance().mapLayersByName("04_buffer")[0]

        result = processing.run("native:fieldcalculator", {'INPUT': input_layer, 'FIELD_NAME': 'id_kompleksy', 'FIELD_TYPE': 1, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 0, 'FORMULA': '@id', 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("05_buffor_id")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)

        self.appendDataToLabel("05 Obliczono id buforu", self.dockwidget.label_info)


    # 06 Spatial join to get buffer id to input layer

    def spatialJoin(self):
        input_layer = QgsProject.instance().mapLayersByName("03_single_parts")[0]
        input_layer2 = QgsProject.instance().mapLayersByName("05_buffor_id")[0]
        result = processing.run("native:joinbynearest", {
            'INPUT': input_layer, 'INPUT_2': input_layer2, 'FIELDS_TO_COPY': ['id_kompleksy'], 'DISCARD_NONMATCHING': False, 'PREFIX': '', 'NEIGHBORS': 1,
            'MAX_DISTANCE': None, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("06_compl_buffor_id")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)

        self.appendDataToLabel("06 Dołączono id buforu do kompleksów", self.dockwidget.label_info)


    # 07 Dissolve by id

    def dissByBuffId(self):

        input_layer = QgsProject.instance().mapLayersByName("06_compl_buffor_id")[0]

        result = processing.run("native:dissolve", {
            'INPUT': input_layer, 'FIELD': ['id_kompleksy'], 'SEPARATE_DISJOINT': False, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']
        outputlayer.setName("07_compl_diss")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)

        self.appendDataToLabel("07 Zagregowano kompleksy leśne", self.dockwidget.label_info)

    # 08 Calculate area

    def calculateArea(self):

        input_layer = QgsProject.instance().mapLayersByName("07_compl_diss")[0]

        result = processing.run("native:fieldcalculator", {
            'INPUT':input_layer, 'FIELD_NAME': 'kompl_area_ha', 'FIELD_TYPE': 0, 'FIELD_LENGTH': 10, 'FIELD_PRECISION': 2, 'FORMULA': '$AREA/10000',
            'OUTPUT': 'memory:'})

        outputlayer = result['OUTPUT']
        outputlayer.setName("kompleksy")
        join_layer = QgsProject.instance().addMapLayer(outputlayer)

        self.appendDataToLabel("08 Obliczono powierzchnie kompleksów", self.dockwidget.label_info)



    # TODO
    # make validation for input
    # set crs for project
    # clean attribute table
    # delete unnecessary temp layers
    # save final layer in folder



    def selectCRS(self):
        dialog = QgsProjectionSelectionDialog()
        dialog.exec_()
        crs = dialog.crs().authid()
        if crs !='':
            QgsProject.instance().setCrs(QgsCoordinateReferenceSystem(crs))
            self.dockwidget.lineEditSelectedCRS.setText(crs)
            self.appendDataToLabel("Wybrano układ współrzędnych dla projektu: " + str(crs), self.dockwidget.label_info)

            #filename = self.dlg.lineEditCRS.text()
            # dirnameOfCatalog = self.resolveDir('info')
            # dirOfFile = dirnameOfCatalog + "/crs.txt"
            # if not os.path.isfile(dirOfFile):
            # file = open(dirOfFile, "w+")
            # file.write(str(crs))
            # file.close()



    def runProcesses(self):
        # 01
        try:
            self.repairGeometry()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 02
        try:
            self.createSpatialIndex()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 03
        try:
            self.multiToSinglePart()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 04
        try:
            self.bufferComplexes()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 05
        try:
            self.calcBuffId()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 06
        try:
            self.spatialJoin()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 07
        try:
            self.dissByBuffId()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)

        # 08
        try:
            self.calculateArea()
            self.appendDataToLabel("Proces zakónczył się powodzeniem!", self.dockwidget.label_info)
        except Exception as e:
            self.appendDataToLabel("Proces zakónczył się niepowodzeniem: " + str(e), self.dockwidget.label_info)





    #--------------------------------------------------------------------------
    # Method for connect controls and run methods
    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING ForestComplexGenerator"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = ForestComplexGeneratorDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            self.dockwidget.pushButtonGenerateComplexes.clicked.connect(lambda: self.runProcesses())

            self.dockwidget.pushButtonSetCRS.clicked.connect(lambda: self.selectCRS())
